from __future__ import absolute_import, division, print_function, unicode_literals

from aspen import Response
import balanced

from gratipay.billing.exchanges import repr_exception
from gratipay.models.exchange_route import ExchangeRoute
from gratipay.utils import get_participant

[---]

request.allow('POST')
participant = get_participant(state, restrict=True)

network = request.body['network']
address = request.body['address']


# Get a balanced account.
# =======================
# This will create one if user.balanced_customer_href is None.

account = participant.get_balanced_account()


# For a bank account, ensure the user is identified.
# ==================================================

if network == 'balanced-ba' and account.merchant_status != 'underwritten':
    raise Response(400, _("You need to verify your identity first."))


# No errors? Great! Let's add the bank account.
# =============================================

# Clear out any old ones first.
route = ExchangeRoute.from_network(participant, network)
if route:
    route.invalidate()

try:
    ExchangeRoute.associate_balanced(participant, account, network, address)
except balanced.exc.HTTPError as err:
    raise Response(400, repr_exception(err))

[---] application/json via json_dump
{}
