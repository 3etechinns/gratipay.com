from aspen import Response
import balanced

from gratipay import billing

[-----------------------------------------------------------------------------]

if user.ANON:
    raise Response(403)
participant = user.participant

request.allow('POST')

body = request.body
out = {}

if body.get('action') == 'delete':
    if participant.balanced_customer_href:
        balanced_account = participant.get_balanced_account()
        billing.clear(website.db, u"bank account", participant, balanced_account)

elif body.get('action') == 'store-error':
    billing.store_result(website.db, u"bank account", participant, body['msg'])

else:

    # Get a balanced account.
    # =======================
    # This will create one if user.balanced_customer_href is None.

    balanced_account = participant.get_balanced_account()


    # Ensure the user is identified.
    # ==============================

    if balanced_account.merchant_status != 'underwritten':
        out = {'problem': _("You need to verify your identity first.")}


    # No errors? Great! Let's add the bank account.
    # =============================================

    if not out:

        # Clear out any old ones first.
        billing.clear(website.db, u"bank account", participant, balanced_account)

        bank_account_uri = body['bank_account_uri']
        try:
            billing.associate( website.db
                             , u"bank account"
                             , participant
                             , balanced_account
                             , bank_account_uri
                              )
        except balanced.exc.HTTPError as err:
            out = {"problem": "Problem", "error": err.message}
        else:
            out = {"problem": ""}

[---] application/json via json_dump
out
