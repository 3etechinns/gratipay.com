from collections import OrderedDict
from gratipay.utils import get_featured_projects, icons
import random

[---]
PROJECTS_PER_PAGE = 10

# Can't factor this out because of translations?
i18ned_statuses = { "approved": _("Approved")
                  , "unreviewed" : _("Unreviewed")
                  , "rejected": _("Rejected")
                  , "featured": _("Featured")
                   }

status_filter = request.qs.get('status')
status_filter_active = (status_filter and status_filter in ['unreviewed', 'rejected', 'approved'])

page = request.qs.get('page', 1)
try:
  page = int(page)
except ValueError:
  page = 1

if status_filter_active:
    status_value = {
        'unreviewed': None,
        'rejected': False,
        'approved': True
    }[status_filter]

    total_project_count = website.db.one("""

        SELECT COUNT(1)
          FROM teams
         WHERE is_approved IS %s
           AND not is_closed

    """, (status_value, ))

    limit, offset = PROJECTS_PER_PAGE, (page - 1) * PROJECTS_PER_PAGE

    projects = website.db.all("""

        SELECT teams.*::teams
          FROM teams
         WHERE is_approved IS %s
           AND not is_closed
      ORDER BY id DESC
         LIMIT %s
        OFFSET %s

    """, (status_value, limit, offset))

else:
    projects = get_featured_projects(website.db)


tabs = OrderedDict()
tabs['featured'] = {}
tabs['approved'] = {'status_filter': 'approved'}
tabs['unreviewed'] = {'status_filter': 'unreviewed'}
tabs['rejected'] = {'status_filter': 'rejected'}

for key, tab in tabs.iteritems():
    if tab.get('status_filter'):
        tab['link'] = '?status=%s' % tab['status_filter']
    else:
        tab['link'] = '.'
    tab['is_selected'] = (tab.get('status_filter') == status_filter)
    tab['title'] = i18ned_statuses[key]
    status = icons.REVIEW_MAP[key]
    tab['html'] = '<span class="status-icon {}">{}</span> {}'.format( status
                                                                    , icons.STATUS_ICONS[status]
                                                                    , tab['title']
                                                                     )

title = _("Projects")
suppress_sidebar = True
page_id = "homepage"
[---]
{% extends "templates/base.html" %}
{% block head_early %}
    {% if website.optimizely_id and request.headers.get('DNT') != '1' %}
    <script src="//cdn.optimizely.com/js/{{ website.optimizely_id }}.js"></script>
    {% endif %}
{% endblock %}
{% block head %}
    <link rel="publisher" href="https://plus.google.com/104524895706770139568">
    <link type="application/opensearchdescription+xml" rel="search" href="/opensearch.osdd" />
    <meta name="description" content="Pay for open source on Gratipay." />
    <meta name="fb:app_id" content="229465400522758" />
    <meta name="og:type" content="website" />
    <meta name="og:url" content="https://gratipay.com/" />
    <meta name="og:title" content="Gratipay" />
    <meta name="og:image" content="{{ website.asset('gratipay.opengraph.png') }}" />
{% endblock %}

{% block banner %}
    <a href="/about/"><h1>{{ _("Pay for open source.") }}</h1></a>
{% endblock %}

{% block content %}
<form action="/apply" class="apply-button">
    <button type="submit">{{ _("Fund Your Project") }}</button>
</form>

<ul class="nav">
    {% for tab in tabs %}
    <li>
        <a href="{{tabs[tab]['link']}}"
           class="{{ 'selected' if tabs[tab]['is_selected'] }}">
            {{ tabs[tab]['html']|safe }}
        </a>
    </li>
    {% endfor %}
</ul>

<table class="listing">
    {% set project_list = projects %}
    {% set start_index = ((page - 1) * PROJECTS_PER_PAGE) + 1 %}
    {% include "templates/project-listing.html" %}
</table>

{% if status_filter_active and (total_project_count > PROJECTS_PER_PAGE) %}
    {% set total_project_count = total_project_count %}
    {% set projects_per_page = PROJECTS_PER_PAGE %}
    {% set current_page = page %}
    {% set status_filter = status_filter %}
    {% include "templates/project-pagination.html" %}
{% endif %}

{% endblock %}
